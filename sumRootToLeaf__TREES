/***
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers % 1003.


Problem Constraints
0 <= Node.val <= 9


Input Format
The first argument is TreeNode A, pointing to the root of the tree.


Output Format
Return an integer equal to the total sum of all root-to-leaf numbers % 1003.


Example Input
    1
   / \
  2   3


Example Output
25


Example Explanation
    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = (12 + 13) % 1003 = 25 % 1003 = 25.

**/



int sumNum(TreeNode* A, int ans){
    if(A == nullptr){
        return 0;    //incase of no nodes
    }
    ans = ((ans%1003)*10 + A -> val)%1003;
    if((A -> left == nullptr) && (A -> right == nullptr)){
        return ans % 1003;    //incase of only one node
    }
    return sumNum(A -> left, ans) + sumNum(A -> right, ans);            // sum of right and left subtree paths numbers and ans consists of root value
}
int Solution::sumNumbers(TreeNode* A) {
    return sumNum(A,0) % 1003;
}
