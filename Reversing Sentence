/*
Given a sentence, reverse the entire sentence word-by-word.
Note: Solve using stack or in-place swap. Do not simply scan, split and print in reverse order.

Input Format

First line of input contains T - number of test cases. Its followed by T lines, each contains a sentence S of space separated words of lowercase english alphabet. All the words are separated by a single space.

Constraints

1 <= T <= 1000
1 <= len(S) <= 1000

Output Format

For each test case, print the reversed sentence, separated by newline.

Sample Input 0

3
hello world
a b c d
data structures and algorithms
Sample Output 0

world hello
d c b a
algorithms and structures data
*/

void reverseSentence(string st){
    stack<string>s;
    string temp = "";
    int l = st.length();
    for(int i=0;i<l;i++){
        if(st[i] == ' '){
            s.push(temp);
            temp = "";
        }
        else{
            temp = temp + st[i];
        }
    }
    s.push(temp);
    while(!s.empty()){
        temp = s.top();
        cout << temp << " ";
        s.pop();
    }
    cout << endl;
}
int main() {
    int t;
    cin >> t;
    string str;
    getline(cin,str);
    while(t--){
        string st;
        getline(cin,st);
        reverseSentence(st);
    }
    return 0;
}
